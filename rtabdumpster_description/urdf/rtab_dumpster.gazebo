<?xml version="1.0"?>
<robot>
<!-- Diff Drive Controller -->
  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
	<legacyMode> false </legacyMode>
        <alwaysOn>true</alwaysOn>
    	<!-- topic name on which to publish the linear and angular velocity of the robot -->
        <commandTopic> cmd_vel </commandTopic>
        <!-- Set the name of the topic to which publish nav_msgs/Odometry messages -->
	<odometryTopic>$(arg odometryTopic)</odometryTopic>
        <!-- Set the name of the odometry frame for this robot -->
	<odometryFrame>$(arg odometryFrame)</odometryFrame>
        <!-- Set the name of the TF frame for the base (root) link of the robot -->
	<robotBaseFrame>$(arg robotBaseFrame)</robotBaseFrame>
        <!-- odometrySource: use 'encoder' to get data form encoder integration or 'world' to get data form gazebo world -->
	<odometrySource> world </odometrySource>
        <!-- publishTf: boolean that sets whether to publish any TF data -->
	<publishTf>$(arg diff_drive_publishTf)</publishTf>
        <!-- publishOdomTF: boolean that sets publishing odom tf data. Set to false for situations where a different source for simulated odom is used -->
	<publishOdomTF>$(arg diff_drive_publishOdomTF) </publishOdomTF>
        <!-- publishWheelTF: boolean, broadcast transform between wheel_parent_frame and wheel_frame -->
	<publishWheelTF> true </publishWheelTF>
	<publishWheelJointState> true </publishWheelJointState>
        <!-- Frequency in (Hz) published by the plugin -->
	<updateRate> 10 </updateRate>
	<leftJoint> left_wheel_hinge </leftJoint>
	<rightJoint> right_wheel_hinge </rightJoint>
	<wheelSeparation> 0.6 </wheelSeparation>
	<wheelDiameter> 0.3 </wheelDiameter>
	<wheelAcceleration> 1  </wheelAcceleration>
	<wheelTorque> 20 </wheelTorque>
	<rosDebugLevel> na </rosDebugLevel> <!-- <rosDebugLevel>Debug</rosDebugLevel> -->
    </plugin>
  </gazebo>

<!-- RGBD Camera -->
  <gazebo reference="camera"> <!-- reference must match the name of the link in the Xacro URDF -->

<sensor name="camera" type="wideanglecamera">
  <camera>
    <horizontal_fov>1.5</horizontal_fov>
    <image>
      <width>320</width>
      <height>240</height>
    </image>
    <clip>
      <near>0.1</near>
      <far>100</far>
    </clip>
    <!-- A new section named `lens`. -->
    <lens>
      <!-- type element is mandatory -->
      <type>custom</type>
      <!-- manually defined mapping function r = c1*f*fun(theta/c2 + c3) -->
      <!-- More information here: https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function -->
      <custom_function>
        <c1>1.05</c1>
        <!-- linear scaling -->
        <c2>4</c2>
        <!-- angle scaling -->
        <f>1.0</f>
        <!-- one more scaling parameter -->
        <fun>tan</fun>
        <!-- one of sin,tan,id -->
      </custom_function>
      <!-- if it is set to `true` your horizontal FOV will ramain as defined -->
      <!-- othervise it depends on lens type and custom function, if there is one -->
      <scale_to_hfov>true</scale_to_hfov>
      <!-- clip everything that is outside of this angle -->
      <cutoff_angle>3.1415</cutoff_angle>
      <!-- resolution of the cubemap texture, the highter it is - the sharper is your image -->
      <env_texture_size>512</env_texture_size>
    </lens>
    <always_on>1</always_on>
    <update_rate>30</update_rate>
  </camera>
  <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
    <cameraName>camera</cameraName>
    <imageTopicName>image_raw</imageTopicName>
    <cameraInfoTopicName>camera_info</cameraInfoTopicName>
    <frameName>camera</frameName>
    <hackBaseline>0.07</hackBaseline>
  </plugin>
</sensor>


  </gazebo>

  <!-- hokuyo laser scanner-->
  <gazebo reference="hokuyo">
    <sensor type="ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/scan</topicName><!-- can include namespaces to avoid collision with other topics -->
        <frameName>hokuyo</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- chassis -->
  <gazebo reference="chassis">
    <material>Gazebo/Blue</material>
  </gazebo>

  <!-- left_wheel -->
  <gazebo reference="left_wheel">
    <material>Gazebo/Grey</material>
  </gazebo>

  <!-- right_wheel -->
  <gazebo reference="right_wheel">
    <material>Gazebo/Grey</material>
  </gazebo>

 <!-- dump_box -->
 <gazebo reference="dump_box">
    <material>Gazebo/Orange</material>
  </gazebo>

 <!-- plastic_bin -->
 <gazebo reference="plastic_bin">
    <material>Gazebo/Yellow</material>
  </gazebo>

 <!-- kinect_pole -->
 <gazebo reference="kinect_pole">
    <material>Gazebo/Green</material>
  </gazebo>

 <!-- laser_pole -->
 <gazebo reference="laser_pole">
    <material>Gazebo/Green</material>
  </gazebo>

</robot>
